2022148083 김영서 

Part 1
1-A
0이 나올때마다 state를 0->1->2->3->0->1... 로 변경해주었다.
state가 3일때 종료되면 1을 출력, 아니라면 0을 출력하고 종료하였다.
만약 1이 나오면 절대 1을 출력할 수 없으니,
state를 end로 바꾼뒤 뒤에 있는 값들을 전부 지우고 0을 출력한뒤 종료하였다.

1-B
state가 0일때 input이 0이면 state를 1로 바꾸고 state가 1일떄 input이 1이면 state를 0으로 바꾼다.
이렇게 반복하다 마지막 input이 0이라면 1을 출력하고 종료한다
만약 마지막 input이 1이라면 0을 출력하고 종료한다
만약 state가 0일때 input이 0이거나 state가 1일때 input이 1이면
state를 end로 바꾼뒤 뒤에 있는 값들을 전부 지우고 0을 출력한뒤 종료하였다.

1-C
state를 숫자+(ox)형태를 만들었다.
숫자는 현재 몇bit에 있는지, ox는 1이 짝수인지 홀수인지를 의미한다.
만약 4_에 도달하지 않고 끝난다면 0을 출력하고 프로그램을 종료한다
만약 4o에 도달한다면 다음 숫자에 기반하여 다음 4bit을 다시 확인한다. 
만약 4o에서 끝난다면 1을 출력하고 프로그램을 종료한다.
만약 4x에 도달한다면 state를 end로 바꾼뒤 뒤에 있는 값들을 전부 지우고 0을 출력한뒤 종료하였다.

1-D
1을 0으로, 0을 1로 바꿉니다
끝에 도달하면 맨 왼쪽으로 갑니다
맨 왼쪽부터 1을 보면 지우고, 0을 만나면 코드를 종료합니다

1-E
9가지 경우의 수에 대한 case를 전부 state로 만든다.
state에 따라 이기거나 비긴 가위,바위,보를 출력한다

Part2
Part2는 주어진 Universal turing machine의 코드를 바탕으로 INPUT을 제작하였다.
시작하는 state가 모두 default 0 state이니 맨 왼쪽 INPUT만 !로, 나머지는 :로 구분한다.
:안에는 3개의 값이 들어가는데 왼쪽부터 공백,0,1이 입력되었을때를 의미한다. 
이는 ','를 통해 구분한다.
각각의 값은 출력할값(_,0,1),다음 symbol(L,R),다음 state(+,-)를 의미한다
Part1의 코드를 그대로 Part2의 input으로 활용하였다. 
만약 state에서 3가지 값중 일부만 요구하면, 빈곳은 공백으로 두었다.

2-A~2-C
part1에서 짠 코드에 맞추어 INPUT을 작성하였다.

2-D
part1에서 짠 코드를 그대로 사용하자 맨 왼쪽에 공백이 한칸 생기고 출력값이 나왔다. 
이를 해결하기 위해 halt 전에 전체값들을 한번 왼쪽으로 옮기는 process를 수행하였다.
지금의 part1 코드는 이를 일부 적용하여 수정된 상태이다.

2-E
part1에서 짠 코드에 맞추어 INPUT을 작성하였다.





